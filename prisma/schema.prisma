generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// Usuario: puede ser user o admin, según su rol tiene unas u otras opciones disponibles

enum rol {
  USER
  ADMIN
}

model usuario {
  id       String @id @default(cuid())
  nombre   String @unique
  rol      rol    @default(USER)
  password String
}

// Lugar: punto del mapa categorizado por grupos y colores

model color {
  id    String  @id @default(cuid())
  hex   String
  grupo grupo[]
}

model grupo {
  id      String  @id @default(cuid())
  nombre  String
  colorId String
  color   color   @relation(fields: [colorId], references: [id])
  lugar   lugar[]
}

model lugar {
  id      String @id @default(cuid())
  nombre  String
  lat     Float
  lon     Float
  grupoId String
  grupo   grupo  @relation(fields: [grupoId], references: [id])
  item    item[]

  @@unique([lat, lon])
}

// Soporte: medio por el cuál se distribuye la publicidad
// Tipo: describe el soporte: pantalla, televisor, videowall, valla, mural
// Categoria: cada uno de los tipos puede ser digitales o convencionales, dependiendo de qué categoría tengan se les asignará unas u otras propiedades al soporte

enum categoria {
  DIGITAL
  CONVENCIONAL
}

model tipo {
  id                  String                @id @default(cuid())
  nombre              String
  svg                 String
  categoria           categoria
  soportedigital      soportedigital[]
  soporteconvencional soporteconvencional[]
}

model soportedigital {
  id            String @id @default(cuid())
  nombre        String
  tipo_id       String
  tipo          tipo   @relation(fields: [tipo_id], references: [id])
  pulgadas      Float
  pixeles_alto  Int
  pixeles_ancho Int
  item          item[]
}

model soporteconvencional {
  id       String @id @default(cuid())
  nombre   String
  tipo_id  String
  tipo     tipo   @relation(fields: [tipo_id], references: [id])
  alto     Float
  ancho    Float
  espacios Int // Soportes de una cara, de dos caras
  item     item[]
}

// Item: unidad de soporte digital o convencional que está instalada en un lugar

model item {
  id                     String               @id @default(cuid())
  nombre                 String
  soportedigital_id      String?
  soportedigital         soportedigital?      @relation(fields: [soportedigital_id], references: [id])
  soporteconvencional_id String?
  soporteconvencional    soporteconvencional? @relation(fields: [soporteconvencional_id], references: [id])
  lugarId                String
  lugar                  lugar                @relation(fields: [lugarId], references: [id])
}

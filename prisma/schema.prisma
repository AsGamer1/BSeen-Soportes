generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// Usuario: puede ser user o admin, según su rol tiene unas u otras opciones disponibles

enum rol {
  USER
  ADMIN
}

model usuario {
  id       String @id @default(cuid())
  nombre   String @unique
  rol      rol    @default(USER)
  password String
}

// Lugar: punto del mapa categorizado por grupos y colores

model color {
  id    String  @id @default(cuid())
  hex   String
  grupo grupo[]
}

model grupo {
  id      String  @id @default(cuid())
  nombre  String
  colorId String
  color   color   @relation(fields: [colorId], references: [id])
  lugar   lugar[]
}

model lugar {
  id           String         @id @default(cuid())
  nombre       String
  lat          Float
  lon          Float
  grupoId      String
  grupo        grupo          @relation(fields: [grupoId], references: [id])
  localizacion localizacion[]

  @@unique([lat, lon])
}

// SOPORTE: medio por el cuál se distribuye la publicidad
// TIPO: describe el soporte: pantalla, televisor, videowall, valla, mural
// CATEGORIA: cada uno de los tipos puede ser digitales o convencionales, dependiendo de qué categoría tengan se les asignará unas u otras propiedades al soporte

enum categoria {
  DIGITAL
  CONVENCIONAL
}

model tipo {
  id           String    @id @default(cuid())
  nombre       String
  svg          String
  categoria_id String
  categoria    categoria
  soporte      soporte[]
}

model soporte {
  id                  String                @id @default(cuid())
  tipo_id             String
  tipo                tipo                  @relation(fields: [tipo_id], references: [id])
  soportedigital      soportedigital[]
  soporteconvencional soporteconvencional[]
}

model soportedigital {
  id            String  @id @default(cuid())
  pulgadas      Float
  pixeles_alto  Int
  pixeles_ancho Int
  soporte_id    String
  soporte       soporte @relation(fields: [soporte_id], references: [id])
  item          item[]
}

model soporteconvencional {
  id         String  @id @default(cuid())
  alto       Float
  ancho      Float
  espacios   Int // Soportes de una cara, de dos caras
  soporte_id String
  soporte    soporte @relation(fields: [soporte_id], references: [id])
  item       item[]
}

model item {
  id                     String               @id @default(cuid())
  nombre                 String
  soportedigital_id      String?
  soportedigital         soportedigital?      @relation(fields: [soportedigital_id], references: [id])
  soporteconvencional_id String?
  soporteconvencional    soporteconvencional? @relation(fields: [soporteconvencional_id], references: [id])
  localizacion           localizacion[]
}

model localizacion {
  id       String   @id @default(cuid())
  fecha    DateTime
  item_id  String
  item     item     @relation(fields: [item_id], references: [id])
  lugar_id String
  lugar    lugar    @relation(fields: [lugar_id], references: [id])
}
